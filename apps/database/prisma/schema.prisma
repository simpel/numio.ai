generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organisation {
  id           String        @id @default(cuid())
  name         String
  teams        Team[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  members Membership[]
  invites      Invite[]
}

model Team {
  id             String         @id @default(cuid())
  organisation   Organisation   @relation(fields: [organisationId], references: [id])
  organisationId String
  name           String
  description    String?
  state          TeamState      @default(active)
  casesCreated   Case[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  memberships Membership[] @relation("TeamAsMember")
  members Membership[]
  invites      Invite[]
}

model Client {
  id             String         @id @default(cuid())
  name           String
  orgNumber      String         @unique
  description    String?
  cases          Case[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  members Membership[]
}

model Case {
  id            String        @id @default(cuid())
  client        Client        @relation(fields: [clientId], references: [id])
  clientId      String
  team          Team          @relation(fields: [teamId], references: [id])
  teamId        String        // creator
  title         String
  description   String?
  state         CaseState     @default(created)
  events        Event[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  members Membership[]
}

model Event {
  id         String    @id @default(cuid())
  case       Case      @relation(fields: [caseId], references: [id])
  caseId     String
  actor      UserProfile @relation("EventActor", fields: [actorId], references: [id])
  actorId    String
  occurredAt DateTime  @default(now())
  type       String
  metadata   Json      @default("{}")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?   // Added for NextAuth compatibility
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  profile  UserProfile?

  @@map("users")
}

model UserProfile {
  id           String        @id @default(cuid())
  firstName    String?
  lastName     String?
  email        String?       @unique
  image        String?
  bio          String?       @db.Text
  jobTitle     String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  role         Role          @default(authenticated)
  hasDoneIntro Boolean       @default(false)

  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String        @unique

  memberships Membership[] @relation("UserAsMember")
  events      Event[]       @relation("EventActor")

  @@map("user_profiles")
}

enum Role {
  authenticated
  owner
  member
  assignee
  superadmin
}

model Membership {
  id           String   @id @default(cuid())

  // Polymorphic member: either user or team
  memberUserProfile  UserProfile? @relation("UserAsMember", fields: [memberUserProfileId], references: [id])
  memberUserProfileId String?
  memberTeam         Team?        @relation("TeamAsMember", fields: [memberTeamId], references: [id])
  memberTeamId       String?

  // Polymorphic target: organisation, team, case, or client
  organisation Organisation? @relation(fields: [organisationId], references: [id])
  organisationId String?
  team   Team?        @relation(fields: [teamId], references: [id])
  teamId String?
  case   Case?        @relation(fields: [caseId], references: [id])
  caseId String?
  client Client?      @relation(fields: [clientId], references: [id])
  clientId String?

  role         Role
  createdAt    DateTime @default(now())

  @@unique([memberUserProfileId, memberTeamId, organisationId, teamId, caseId, clientId])
}

enum InviteStatus {
  pending
  accepted
  expired
  cancelled
}

enum CaseState {
  created
  active
  on_hold
  completed
  closed
}

enum TeamState {
  active
  inactive
}

model Invite {
  id             String   @id @default(cuid())
  email          String
  organisation   Organisation? @relation(fields: [organisationId], references: [id])
  organisationId String?
  team           Team?        @relation(fields: [teamId], references: [id])
  teamId         String?
  role           Role
  token          String
  createdAt      DateTime @default(now())
  expiresAt      DateTime
  acceptedAt     DateTime?
  acceptedById   String?
  status         InviteStatus @default(pending)

  @@unique([email, organisationId, teamId, status])
}

model MetricEvent {
  id        String   @id @default(cuid())
  type      String   // Event type (e.g., "user_profile_created")
  entityId  String?  // ID of the related entity
  metadata  Json     @default("{}") // Additional context
  timestamp DateTime @default(now())
  
  @@index([type, timestamp])
  @@index([timestamp])
  @@index([entityId])
}

model MetricSnapshot {
  id        String   @id @default(cuid())
  metric    String   // Aggregated metric name
  value     Int
  context   Json?    @default("{}") // For org-specific metrics
  date      DateTime // Date of the snapshot
  period    String   // "daily", "weekly", "monthly"
  
  @@unique([metric, context, date, period])
  @@index([metric, date])
  @@index([context])
}