# Complexity Management

## File Size Limits

- Maximum 300 lines per file
- Maximum 50 lines per function
- Maximum 3 levels of nesting

## Component Guidelines

- Single responsibility principle
- Extract complex logic into custom hooks
- Use composition over inheritance

## Action Guidelines

- Split large action files by domain
- Keep actions focused and single-purpose
- Extract complex business logic into utilities

## Complexity Indicators

- Functions with more than 5 parameters
- Components with more than 3 state variables
- Files with more than 10 exported items
- Deep nesting (more than 3 levels)

## Refactoring Strategies

- Extract utility functions for repeated logic
- Create custom hooks for complex state management
- Split large components into smaller, focused ones
- Use composition to reduce component complexity

## Examples

### ✅ Good Examples

```typescript
// Small, focused action file
export async function createUserAction(
	input: CreateUserInput
): Promise<ActionState<User>> {
	try {
		const user = await db.user.create({ data: input });
		return { isSuccess: true, message: 'User created', data: user };
	} catch (error) {
		return { isSuccess: false, message: 'Failed to create user' };
	}
}

// Custom hook for complex logic
export function useUserProfile(userId: string) {
	const [profile, setProfile] = useState<UserProfile | null>(null);
	const [isLoading, setIsLoading] = useState(false);

	useEffect(() => {
		// Complex logic here
	}, [userId]);

	return { profile, isLoading };
}
```

### ❌ Bad Examples

```typescript
// Large, complex action file (570+ lines)
export async function handleComplexCaseAction(
	caseId: string,
	userId: string,
	teamId: string,
	organisationId: string,
	state: string,
	metadata: object,
	options: object
): Promise<ActionState<ComplexResult>> {
	// 100+ lines of complex logic
}

// Component with too many responsibilities
export default function ComplexComponent({
	user,
	team,
	organisation,
	cases,
	settings,
}) {
	// 300+ lines of mixed concerns
}
```

## When to Refactor

- File exceeds 300 lines
- Function exceeds 50 lines
- Component has more than 3 state variables
- Multiple responsibilities in single file
- Deep nesting (more than 3 levels)
- Repeated code patterns
  description:
  globs:
  alwaysApply: false

---
