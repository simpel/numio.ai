# Architectural Boundaries

## Layer Separation

- **UI Layer**: Components, pages, layouts
- **Application Layer**: Hooks, utilities, state management
- **Domain Layer**: Business logic, types, interfaces
- **Infrastructure Layer**: Database, external services

## Import Rules

- UI layer can import from Application and Domain layers
- Application layer can import from Domain and Infrastructure layers
- Domain layer can import from Infrastructure layer
- No upward imports (Infrastructure → Domain → Application → UI)

## File Organization

- Co-locate related files in feature directories
- Use consistent file naming patterns
- Avoid barrel exports (index.ts) unless necessary

## Directory Structure

```
src/
├── components/          # UI Layer
├── hooks/              # Application Layer
├── lib/                # Domain & Infrastructure Layers
│   ├── auth/           # Infrastructure
│   ├── db/             # Infrastructure
│   └── state-machines/ # Domain
├── types/              # Domain Layer
└── utils/              # Application Layer
```

## Examples

### ✅ Good Examples

```typescript
// UI Layer importing from Application Layer
import { useUserProfile } from '@src/hooks/use-user-profile';

// Application Layer importing from Domain Layer
import { UserProfile } from '@src/types/user-profile';

// Domain Layer importing from Infrastructure Layer
import { db } from '@numio/ai-database';
```

### ❌ Bad Examples

```typescript
// UI Layer importing directly from Infrastructure Layer
import { db } from '@numio/ai-database';

// Infrastructure Layer importing from UI Layer
import { UserProfileCard } from '@src/components/user-profile-card';

// Deep relative imports across layers
import { getUserProfile } from '../../../lib/db/user-profile/user-profile.actions';
```

description: Layer separation and import rules
globs:

- src/\*_/_.{ts,tsx}
  alwaysApply: true

---
