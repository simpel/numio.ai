# File Structure and Organization

## Component Folder Structure

- Place components in individual folders with supporting files
- Use consistent naming: `component-name/component-name.tsx`
- Include supporting files in the same folder
- Use barrel exports via `index.ts`

### Folder Structure Example

```
components/
├── user-card/
│   ├── user-card.tsx          # Main component
│   ├── user-card.styles.ts    # Styling utilities
│   ├── user-card.types.ts     # Type definitions
│   ├── user-card.utils.ts     # Helper functions
│   └── index.ts               # Barrel export
├── data-table/
│   ├── data-table.tsx
│   ├── data-table.styles.ts
│   ├── data-table.types.ts
│   └── index.ts
```

## File Structure Order

Follow this strict order in every TypeScript/TSX file:

1. **Imports** (external libraries first, then internal)
2. **Types/Interfaces** (always at the top)
3. **Constants** (UPPER_CASE)
4. **Variables** (camelCase)
5. **State declarations** (useState, useReducer)
6. **Internal functions** (helpers, utilities)
7. **useEffect hooks**
8. **Event handlers**
9. **Component output** (return statement)

## Coding Standards

### Types and Interfaces

```typescript
// ✅ Good: Types at the top of file
interface UserCardProps {
	user: User;
	onEdit?: (user: User) => void;
	onDelete?: (userId: string) => void;
	variant?: 'default' | 'compact';
}

type UserCardVariant = 'default' | 'compact';

interface UserCardState {
	isEditing: boolean;
	isLoading: boolean;
}

// Component implementation below...
```

### Arrow Functions

```typescript
// ✅ Good: Always use arrow functions
const UserCard = ({
	user,
	onEdit,
	onDelete,
	variant = 'default',
}: UserCardProps) => {
	// Component logic
};

// ✅ Good: Arrow functions for handlers
const handleEdit = () => {
	setIsEditing(true);
};

const handleSave = async (userData: Partial<User>) => {
	// Save logic
};

// ❌ Bad: Function declarations
function UserCard(props: UserCardProps) {
	// Component logic
}
```

### Object Parameters

```typescript
// ✅ Good: Object parameters for multiple arguments
const createUser = async ({ name, email, role }: CreateUserParams) => {
	// Implementation
};

const updateUser = async ({ id, data }: UpdateUserParams) => {
	// Implementation
};

// ✅ Good: Object parameters for complex configurations
const fetchUsers = async ({
	page = 1,
	limit = 10,
	filters = {},
	sortBy = 'name',
}: FetchUsersParams) => {
	// Implementation
};

// ❌ Bad: Multiple individual parameters
const createUser = async (name: string, email: string, role: string) => {
	// Implementation
};
```

## Complete File Structure Example

```typescript
// 1. Imports
import React, { useState, useEffect } from 'react';
import { cn } from '@/lib/utils';
import { Button } from '@/components/ui/button';
import { userCardStyles } from './user-card.styles';
import { formatUserName } from './user-card.utils';
import type { UserCardProps, User } from './user-card.types';

// 2. Types/Interfaces (already at top of file)
interface UserCardState {
  isEditing: boolean;
  isLoading: boolean;
}

// 3. Constants
const MAX_NAME_LENGTH = 50;
const DEFAULT_AVATAR = '/images/default-avatar.png';

// 4. Variables
const UserCard = ({ user, onEdit, onDelete, variant = 'default' }: UserCardProps) => {
  const isAdmin = user.role === 'ADMIN';
  const displayName = user.name.length > MAX_NAME_LENGTH
    ? `${user.name.slice(0, MAX_NAME_LENGTH)}...`
    : user.name;

  // 5. State declarations
  const [isEditing, setIsEditing] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [formData, setFormData] = useState(user);

  // 6. Internal functions
  const validateForm = (data: Partial<User>): boolean => {
    return !!(data.name && data.email);
  };

  const formatDate = (date: Date): string => {
    return new Intl.DateTimeFormat('en-US').format(date);
  };

  // 7. useEffect hooks
  useEffect(() => {
    if (isEditing) {
      setFormData(user);
    }
  }, [isEditing, user]);

  useEffect(() => {
    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === 'Escape' && isEditing) {
        setIsEditing(false);
      }
    };

    document.addEventListener('keydown', handleEscape);
    return () => document.removeEventListener('keydown', handleEscape);
  }, [isEditing]);

  // 8. Event handlers
  const handleEdit = () => {
    setIsEditing(true);
  };

  const handleSave = async () => {
    if (!validateForm(formData)) {
      return;
    }

    setIsLoading(true);
    try {
      await updateUser({ id: user.id, data: formData });
      setIsEditing(false);
      onEdit?.(formData as User);
    } catch (error) {
      console.error('Failed to update user:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleDelete = async () => {
    if (!confirm('Are you sure you want to delete this user?')) {
      return;
    }

    setIsLoading(true);
    try {
      await deleteUser({ id: user.id });
      onDelete?.(user.id);
    } catch (error) {
      console.error('Failed to delete user:', error);
    } finally {
      setIsLoading(false);
    }
  };

  // 9. Component output
  return (
    <div className={cn('user-card', `user-card--${variant}`)}>
      {/* JSX content */}
    </div>
  );
};
```

## Supporting Files

### Styles File (`component.styles.ts`)

```typescript
import { cn } from '@/lib/utils';

export const userCardStyles = {
	container: (variant: UserCardVariant) =>
		cn('rounded-lg border p-4', variant === 'compact' && 'p-2'),
	header: 'flex items-center justify-between mb-3',
	avatar: 'w-10 h-10 rounded-full',
	name: 'font-semibold text-gray-900',
	email: 'text-sm text-gray-500',
	actions: 'flex gap-2 mt-3',
	button: (variant: 'primary' | 'secondary') =>
		cn(
			'px-3 py-1 rounded text-sm',
			variant === 'primary' && 'bg-blue-500 text-white',
			variant === 'secondary' && 'bg-gray-200 text-gray-700'
		),
};
```

### Types File (`component.types.ts`)

```typescript
export interface User {
	id: string;
	name: string;
	email: string;
	role: 'ADMIN' | 'USER' | 'GUEST';
	avatar?: string;
	createdAt: Date;
	updatedAt: Date;
}

export interface UserCardProps {
	user: User;
	onEdit?: (user: User) => void;
	onDelete?: (userId: string) => void;
	variant?: 'default' | 'compact';
}

export type UserCardVariant = 'default' | 'compact';

export interface CreateUserParams {
	name: string;
	email: string;
	role: User['role'];
	avatar?: string;
}

export interface UpdateUserParams {
	id: string;
	data: Partial<User>;
}
```

### Utils File (`component.utils.ts`)

```typescript
import { User } from './user-card.types';

export const formatUserName = (name: string, maxLength = 50): string => {
	return name.length > maxLength ? `${name.slice(0, maxLength)}...` : name;
};

export const validateUserEmail = (email: string): boolean => {
	const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
	return emailRegex.test(email);
};

export const getUserInitials = (user: User): string => {
	return user.name
		.split(' ')
		.map((word) => word[0])
		.join('')
		.toUpperCase()
		.slice(0, 2);
};
```

### Index File (`index.ts`)

```typescript
export { UserCard } from './user-card';
export type {
	UserCardProps,
	User,
	CreateUserParams,
	UpdateUserParams,
} from './user-card.types';
export { userCardStyles } from './user-card.styles';
export {
	formatUserName,
	validateUserEmail,
	getUserInitials,
} from './user-card.utils';
```

## Import/Export Standards

### Import Order

```typescript
// 1. React and Next.js
import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/router';

// 2. External libraries
import { cn } from 'clsx';
import { format } from 'date-fns';

// 3. Internal utilities and types
import { cn } from '@/lib/utils';
import { Button } from '@/components/ui/button';

// 4. Local imports (same folder)
import { userCardStyles } from './user-card.styles';
import { formatUserName } from './user-card.utils';
import type { UserCardProps, User } from './user-card.types';
```

### Export Standards

```typescript
// ✅ Good: Named exports for components
export const UserCard = ({ user, onEdit, onDelete }: UserCardProps) => {
	// Component implementation
};

// ✅ Good: Named exports for utilities
export const formatUserName = (name: string): string => {
	// Implementation
};

// ✅ Good: Type exports
export type { UserCardProps, User };

// ❌ Bad: Default exports (except for main component files)
export default UserCard;
```

## Common Patterns

### Action Functions

```typescript
// ✅ Good: Consistent action pattern with object parameters
export const createUserAction = async ({
	name,
	email,
	role,
}: CreateUserParams): Promise<ActionState<User>> => {
	try {
		const user = await db.user.create({ data: { name, email, role } });
		return {
			isSuccess: true,
			message: 'User created successfully',
			data: user,
		};
	} catch (error) {
		console.error('Error creating user:', error);
		return { isSuccess: false, message: 'Failed to create user' };
	}
};
```

### Custom Hooks

```typescript
// ✅ Good: Custom hook with object parameters
export const useUser = ({ userId, includeProfile = false }: UseUserParams) => {
	const [user, setUser] = useState<User | null>(null);
	const [isLoading, setIsLoading] = useState(false);
	const [error, setError] = useState<string | null>(null);

	useEffect(() => {
		const fetchUser = async () => {
			setIsLoading(true);
			try {
				const result = await getUserAction({ id: userId, includeProfile });
				if (result.isSuccess) {
					setUser(result.data);
				} else {
					setError(result.message);
				}
			} catch (err) {
				setError('Failed to fetch user');
			} finally {
				setIsLoading(false);
			}
		};

		fetchUser();
	}, [userId, includeProfile]);

	return { user, isLoading, error };
};
```

description: Enforce consistent TypeScript/TSX file structure and organization
globs:

- src/\*_/_.{ts,tsx}
  alwaysApply: true
